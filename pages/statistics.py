import streamlit as st
import sqlite3
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

def show_statistics():
    st.markdown("""
        <h1 style='text-align: center; color: #2e7d32; margin-bottom: 30px;'>
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        </h1>
    """, unsafe_allow_html=True)
    
    conn = sqlite3.connect('eco_monitoring.db')
    points_df = pd.read_sql_query("SELECT * FROM pollution_points", conn)
    volunteers_df = pd.read_sql_query("SELECT * FROM volunteers", conn)
    tasks_df = pd.read_sql_query("SELECT * FROM completed_tasks", conn)
    conn.close()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.markdown("""
        <div style='background-color: #f5f5f5; padding: 20px; border-radius: 10px; margin-bottom: 20px;'>
            <h3 style='color: #1b5e20; margin-bottom: 15px;'>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üìç –í—Å–µ–≥–æ —Ç–æ—á–µ–∫", len(points_df))
    with col2:
        st.metric("üë• –í–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤", len(volunteers_df))
    with col3:
        st.metric("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á", len(tasks_df))
    with col4:
        completion_rate = len(tasks_df) / len(points_df) * 100 if len(points_df) > 0 else 0
        st.metric("üìä % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", f"{completion_rate:.1f}%")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
            <div style='background-color: white; padding: 15px; border-radius: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);'>
                <h4 style='color: #2e7d32;'>üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è</h4>
            </div>
        """, unsafe_allow_html=True)
        
        if not points_df.empty:
            fig1 = px.pie(points_df, 
                         names='pollution_level',
                         color_discrete_sequence=px.colors.sequential.Greens,
                         hole=0.4)
            fig1.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig1, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—á–∫–∞—Ö –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è")
    
    with col2:
        st.markdown("""
            <div style='background-color: white; padding: 15px; border-radius: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);'>
                <h4 style='color: #2e7d32;'>üìä –¢–∏–ø—ã –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π</h4>
            </div>
        """, unsafe_allow_html=True)
        
        if not points_df.empty:
            pollution_type_counts = points_df['pollution_type'].value_counts().reset_index()
            pollution_type_counts.columns = ['type', 'count']
            
            fig2 = px.bar(pollution_type_counts,
                         x='type',
                         y='count',
                         color='type',
                         color_discrete_sequence=px.colors.sequential.Greens,
                         labels={'type': '–¢–∏–ø –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'})
            fig2.update_layout(showlegend=False)
            st.plotly_chart(fig2, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∏–ø–∞—Ö –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è")
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
    st.markdown("""
        <div style='background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); margin-top: 20px;'>
            <h4 style='color: #2e7d32;'>üìà –î–∏–Ω–∞–º–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π</h4>
        </div>
    """, unsafe_allow_html=True)
    
    if not tasks_df.empty:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ –æ–±—ä–µ–∫—Ç—ã datetime
            tasks_df['completed_at'] = pd.to_datetime(tasks_df['completed_at'], format='mixed')
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
            timeline_data = tasks_df.groupby(tasks_df['completed_at'].dt.date).size().reset_index()
            timeline_data.columns = ['date', 'count']
            
            fig3 = go.Figure()
            fig3.add_trace(go.Scatter(x=timeline_data['date'], 
                                    y=timeline_data['count'],
                                    mode='lines+markers',
                                    line=dict(color='#2e7d32', width=2),
                                    marker=dict(size=8, color='#1b5e20')))
            fig3.update_layout(
                xaxis_title="–î–∞—Ç–∞",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
                hovermode='x unified'
            )
            st.plotly_chart(fig3, use_container_width=True)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç: {str(e)}")
    else:
        st.info("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö")

    # –î–æ–±–∞–≤–∏–º —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
    if not volunteers_df.empty:
        st.markdown("""
            <div style='background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); margin-top: 20px;'>
                <h4 style='color: #2e7d32;'>üèÜ –†–µ–π—Ç–∏–Ω–≥ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤</h4>
            </div>
        """, unsafe_allow_html=True)
        
        top_volunteers = volunteers_df.nlargest(10, 'rating')[['name', 'rating']]
        fig4 = px.bar(top_volunteers,
                     x='name',
                     y='rating',
                     color='rating',
                     color_continuous_scale='Greens',
                     labels={'name': '–í–æ–ª–æ–Ω—Ç–µ—Ä', 'rating': '–†–µ–π—Ç–∏–Ω–≥'})
        fig4.update_layout(showlegend=False)
        st.plotly_chart(fig4, use_container_width=True)
    else:
        st.info("üë• –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞—Ö")

if __name__ == "__main__":
    show_statistics() 