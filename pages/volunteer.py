import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime
from PIL import Image
import io

def show_volunteer_dashboard(volunteer_id, conn):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞
    volunteer_data = pd.read_sql_query(
        "SELECT name, rating FROM volunteers WHERE id = ?",
        conn,
        params=(volunteer_id,)
    )
    
    if not volunteer_data.empty:
        volunteer_name = volunteer_data.iloc[0]['name']
        volunteer_rating = volunteer_data.iloc[0]['rating']
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–æ—Ñ–∏–ª—å
        st.markdown(f"""
        <div style='background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-bottom: 20px'>
            <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {volunteer_name}! üåü</h2>
            <p>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {volunteer_rating} –æ—á–∫–æ–≤</p>
        </div>
        """, unsafe_allow_html=True)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏
    st.markdown("### üó∫Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —É–±–æ—Ä–∫–∏")
    points_df = pd.read_sql_query(
        "SELECT id, latitude, longitude, description, pollution_level, pollution_type, photo FROM pollution_points WHERE status = '–û—Ç–∫—Ä—ã—Ç—ã–µ'",
        conn
    )
    
    if len(points_df) > 0:
        for _, point in points_df.iterrows():
            with st.expander(f"üìç –¢–æ—á–∫–∞ #{point['id']} - {point['description'][:50]}..."):
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown("""
                    <style>
                        .info-box {
                            background-color: #ffffff;
                            padding: 15px;
                            border-radius: 5px;
                            border: 1px solid #e0e0e0;
                        }
                    </style>
                    """, unsafe_allow_html=True)
                    
                    st.markdown(f"""
                    <div class='info-box'>
                        <p>üåç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {point['latitude']}, {point['longitude']}</p>
                        <p>‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è: {point['pollution_level']}</p>
                        <p>üóëÔ∏è –¢–∏–ø –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è: {point['pollution_type']}</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Ç–æ—á–∫–∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è
                    if point['photo'] is not None:
                        try:
                            image = Image.open(io.BytesIO(point['photo']))
                            st.image(image, caption="–§–æ—Ç–æ –º–µ—Å—Ç–∞ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è", use_column_width=True)
                        except Exception as e:
                            st.warning("–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                
                with col2:
                    st.markdown("#### üìù –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ")
                    # –§–æ—Ä–º–∞ –æ—Ç—á–µ—Ç–∞
                    with st.form(f"cleanup_report_{point['id']}"):
                        cleanup_date = st.date_input("üìÖ –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏", datetime.now())
                        cleanup_description = st.text_area("‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
                        cleanup_photo = st.file_uploader("üì∏ –§–æ—Ç–æ –ø–æ—Å–ª–µ —É–±–æ—Ä–∫–∏", type=['jpg', 'png'])
                        
                        submit = st.form_submit_button("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", 
                                                     use_container_width=True,
                                                     type="primary")
                        
                        if submit:
                            try:
                                c = conn.cursor()
                                photo_bytes = cleanup_photo.read() if cleanup_photo else None
                                
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—á–∫–∏
                                c.execute("UPDATE pollution_points SET status = '–ó–∞–∫—Ä—ã—Ç—ã–µ' WHERE id = ?", 
                                        (point['id'],))
                                
                                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ completed_tasks
                                c.execute("""
                                    INSERT INTO completed_tasks 
                                    (volunteer_id, point_id, completed_at, cleanup_description, cleanup_photo) 
                                    VALUES (?, ?, ?, ?, ?)
                                """, (volunteer_id, point['id'], cleanup_date, cleanup_description, photo_bytes))
                                
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
                                c.execute("UPDATE volunteers SET rating = rating + 10 WHERE id = ?", 
                                        (volunteer_id,))
                                
                                conn.commit()
                                st.success("üéâ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! +10 –∫ —Ä–µ–π—Ç–∏–Ω–≥—É")
                                st.balloons()
                                st.rerun()
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {str(e)}")
    else:
        st.info("üéâ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è —É–±–æ—Ä–∫–∏")
    
    # –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    st.markdown("### üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
    tasks_df = pd.read_sql_query("""
        SELECT 
            ct.id,
            ct.completed_at,
            pp.description as point_description,
            ct.cleanup_description,
            pp.latitude,
            pp.longitude,
            pp.photo as original_photo,
            ct.cleanup_photo
        FROM completed_tasks ct
        JOIN pollution_points pp ON ct.point_id = pp.id
        WHERE ct.volunteer_id = ?
        ORDER BY ct.completed_at DESC
    """, conn, params=(volunteer_id,))
    
    if len(tasks_df) > 0:
        for _, task in tasks_df.iterrows():
            with st.expander(f"üìÖ –ó–∞–¥–∞—á–∞ –æ—Ç {task['completed_at']}"):
                st.markdown(f"""
                <div style='background-color: #ffffff; padding: 15px; border-radius: 5px; border: 1px solid #e0e0e0'>
                    <p>üìç –ú–µ—Å—Ç–æ: {task['point_description']}</p>
                    <p>üåç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {task['latitude']}, {task['longitude']}</p>
                    <p>‚úçÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞: {task['cleanup_description']}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # –§–æ—Ç–æ "–¥–æ" –∏ "–ø–æ—Å–ª–µ"
                col1, col2 = st.columns(2)
                with col1:
                    if task['original_photo'] is not None:
                        try:
                            image = Image.open(io.BytesIO(task['original_photo']))
                            st.image(image, caption="–î–æ —É–±–æ—Ä–∫–∏", use_column_width=True)
                        except:
                            st.warning("–§–æ—Ç–æ '–¥–æ' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                
                with col2:
                    if task['cleanup_photo'] is not None:
                        try:
                            image = Image.open(io.BytesIO(task['cleanup_photo']))
                            st.image(image, caption="–ü–æ—Å–ª–µ —É–±–æ—Ä–∫–∏", use_column_width=True)
                        except:
                            st.warning("–§–æ—Ç–æ '–ø–æ—Å–ª–µ' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    else:
        st.info("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")

def show_volunteer():
    st.markdown("""
    <h1 style='text-align: center; color: #2e7d32;'>üåø –ö–∞–±–∏–Ω–µ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞</h1>
    """, unsafe_allow_html=True)
    
    if 'volunteer_id' not in st.session_state:
        tab1, tab2 = st.tabs(["üîë –í—Ö–æ–¥", "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
        
        with tab1:
            with st.form("login_form"):
                st.markdown("### –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
                email = st.text_input("üìß Email")
                password = st.text_input("üîí –ü–∞—Ä–æ–ª—å", type="password")
                
                if st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True, type="primary"):
                    conn = sqlite3.connect('eco_monitoring.db')
                    c = conn.cursor()
                    
                    c.execute("SELECT id FROM volunteers WHERE email = ? AND password = ?",
                             (email, password))
                    volunteer = c.fetchone()
                    
                    if volunteer:
                        st.session_state.volunteer_id = volunteer[0]
                        st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                        st.rerun()
                    else:
                        st.error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
                    conn.close()
        
        with tab2:
            with st.form("registration_form"):
                st.markdown("### –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")
                
                name = st.text_input("üë§ –ò–º—è –∏ –§–∞–º–∏–ª–∏—è")
                reg_email = st.text_input("üìß Email")
                reg_password = st.text_input("üîí –ü–∞—Ä–æ–ª—å", type="password")
                reg_password_confirm = st.text_input("üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
                
                if st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", use_container_width=True, type="primary"):
                    if not all([name, reg_email, reg_password, reg_password_confirm]):
                        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    elif reg_password != reg_password_confirm:
                        st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    else:
                        conn = sqlite3.connect('eco_monitoring.db')
                        c = conn.cursor()
                        
                        c.execute("SELECT * FROM volunteers WHERE email = ?", (reg_email,))
                        if c.fetchone():
                            st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        else:
                            try:
                                c.execute('''
                                    INSERT INTO volunteers (name, email, password, rating, created_at)
                                    VALUES (?, ?, ?, ?, ?)
                                ''', (name, reg_email, reg_password, 0, datetime.now()))
                                
                                conn.commit()
                                st.success("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
                            finally:
                                conn.close()
    else:
        conn = sqlite3.connect('eco_monitoring.db')
        
        if st.sidebar.button("üö™ –í—ã–π—Ç–∏", type="primary"):
            del st.session_state.volunteer_id
            st.rerun()
        
        show_volunteer_dashboard(st.session_state.volunteer_id, conn)
        conn.close()

if __name__ == "__main__":
    show_volunteer() 